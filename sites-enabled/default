
server {
    # Internal image resizing server.
    server_name localhost;
    listen 8888;

  location ~ "^/media/c/(?<width>\d+)/(?<height>\d+)/(?<image>.+)$" {
        alias /var/www/html/resizer/$image;
        image_filter crop $width $height;
        image_filter_jpeg_quality 80;
        image_filter_buffer 8M;
    }

    location ~ "^/media/r/(?<width>\d+)/(?<height>\d+)/(?<image>.+)$" {
        alias /var/www/html/resizer/$image;
        image_filter resize $width -;
        image_filter_jpeg_quality 80;
        image_filter_buffer 8M;
    }
}


proxy_cache_path /tmp/nginx-images-cache/ levels=1:2 keys_zone=images:10m inactive=24h max_size=100m;


server {
	listen 80;
	listen [::]:80;


	client_max_body_size 32M;
	root /var/www/html/frontend/web;


	server_name localhost;

	set $yii_bootstrap "index.php";
	charset utf-8;
	index index.php index.html index.htm;
	add_header Strict-Transport-Security "max-age=31536000";
	add_header X-Frame-Options SAMEORIGIN;


    location ~ "^/media/(?<action>\w+)/(?<width>\d+)/(?<height>\d+)/(?<image>.+)$" {
        # Proxy to internal image resizing server.
        proxy_pass http://localhost:8888/media/$action/$width/$height/$image;
        proxy_cache images;
        proxy_cache_valid 200 24h;
    }

    location /media {
        # Nginx needs you to manually define DNS resolution when using
        # variables in proxy_pass. Creating this dummy location avoids that.
        # The error is: "no resolver defined to resolve localhost".
        proxy_pass http://localhost:8888/;
    }

	location / {
		try_files $uri $uri/ /$yii_bootstrap?$args;
	}

    location ~ ^/(protected|framework|themes/\w+/views) {
            deny  all;
    }	

    location ~ \.(js|css|png|jpg|gif|swf|ico|pdf|mov|fla|zip|rar)$ {
            try_files $uri =404;
    }


	location ~ \.php$ {
            try_files $uri =404;
			fastcgi_pass unix:/run/php/php7.0-fpm.sock;
            fastcgi_index index.php;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
	        fastcgi_connect_timeout     30s;
	        fastcgi_read_timeout        120s;
	        fastcgi_send_timeout        120s;            
            include fastcgi_params;
            include fastcgi.conf;
	}

    location ~ /\.ht {
        deny all;
  	}

	
}


server {
	listen 80;
	listen [::]:80;


	client_max_body_size 32M;
	root /var/www/html/backend/web;


	server_name admin.localhost;

	set $yii_bootstrap "index.php";
	charset utf-8;
	index index.php;
	add_header Strict-Transport-Security "max-age=31536000";
	add_header X-Frame-Options SAMEORIGIN;

	location / {
		try_files $uri $uri/ /$yii_bootstrap?$args;
	}

    location ~ ^/(protected|framework|themes/\w+/views) {
            deny  all;
    }	

    location ~ \.(js|css|png|jpg|gif|swf|ico|pdf|mov|fla|zip|rar)$ {
            try_files $uri =404;
    }


	location ~ \.php$ {
            try_files $uri =404;
			fastcgi_pass unix:/run/php/php7.0-fpm.sock;
            fastcgi_index index.php;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
	        fastcgi_connect_timeout     30s;
	        fastcgi_read_timeout        120s;
	        fastcgi_send_timeout        120s;            
            include fastcgi_params;
            include fastcgi.conf;
	}


    location ~ /\.ht {
        deny all;
  	}

	
}

# server {
# 	listen 443 ssl http2;
# 	listen [::]:443 ssl http2;

# 	# SSL configuration
# 	#
# 	# listen 443 ssl default_server;
# 	# listen [::]:443 ssl default_server;
# 	#
# 	# Note: You should disable gzip for SSL traffic.
# 	# See: https://bugs.debian.org/773332
# 	#
# 	# Read up on ssl_ciphers to ensure a secure configuration.
# 	# See: https://bugs.debian.org/765782
# 	#

# 	#
# 	ssl_certificate      /etc/ssl/private/whitedigital.local.crt;
#     ssl_certificate_key  /etc/ssl/private/whitedigital.local.key;	

# 	root /var/www/html;

# 	# Add index.php to the list if you are using PHP
# 	index index.php index.html index.htm;

# 	server_name whitedigital.local.io;

# 	location / {
# 		# First attempt to serve request as file, then
# 		# as directory, then fall back to displaying a 404.
# 		try_files $uri $uri/ =404;
# 	}

# 	location ~ \.php$ {
#         include snippets/fastcgi-php.conf;
#         fastcgi_pass unix:/run/php/php7.0-fpm.sock;

#     }

#     location ~ /\.ht {
#         deny all;
#   	}

	
# }
